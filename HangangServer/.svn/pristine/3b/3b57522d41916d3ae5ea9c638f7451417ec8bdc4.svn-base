package com.fuck.hangang.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.swing.event.ListDataEvent;

import org.apache.commons.codec.binary.Base64;
import org.codehaus.jackson.map.ObjectMapper;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fuck.hangang.dao.AdminDao;
import com.fuck.hangang.vo.AdminBoardCommentOfCommentVo;
import com.fuck.hangang.vo.AdminBoardCommentVo;
import com.fuck.hangang.vo.AdminBoardPhotoVo;
import com.fuck.hangang.vo.AdminBoardVo;
import com.fuck.hangang.vo.AdminRequestVo;
import com.fuck.hangang.vo.RequestChangeTeamNameVo;
import com.fuck.hangang.vo.UserVo;

@Controller
public class AdminController {
	@Resource
	AdminDao adminDao;

	String filePath = "photo/adminboard/";
	String savePath = "C:/Users/user/Desktop/springwork/Hangang/src/main/webapp/photo/adminboard/";

	@RequestMapping(value = "/registadminboard", method = RequestMethod.POST)
	public @ResponseBody <T> HashMap<String, T> registadminboard(@RequestBody JSONObject json) {

		HashMap<String, T> resultHashMap = new HashMap<String, T>();

		try {
			AdminBoardVo adminboardVo = new AdminBoardVo();
			ObjectMapper mapper = new ObjectMapper();
			adminboardVo = mapper.readValue(json.toString(), AdminBoardVo.class);

			if (adminboardVo.getPhoto().size() == 0) {
				adminDao.registadminboard(adminboardVo);
			} else {
				adminDao.registadminboard(adminboardVo);

				List<AdminBoardPhotoVo> a_photo = adminboardVo.getPhoto();

				for (int i = 0; i < a_photo.size(); i++) {
					String a_photo_url = writeFile(a_photo.get(i).getA_photo_url(), savePath, adminboardVo.getA_num(),
							i);
					adminDao.registadminboardphoto(adminboardVo.getA_num(), i, a_photo_url);
				}
			}

			resultHashMap.put("result", (T) "Success");
			return resultHashMap;

		} catch (Exception e) {
			e.printStackTrace();
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}

	}

	@RequestMapping(value = "/getadminboard", method = RequestMethod.GET)
	public @ResponseBody <T> HashMap<String, T> getadminboard(@RequestParam("lastnum") int lastnum,
			@RequestParam("flag") int flag) {

		HashMap<String, T> resultHashMap = new HashMap<String, T>();
		List<AdminBoardVo> resultadminboardVo = new ArrayList<AdminBoardVo>();

		try {

			if (lastnum == -1) {
				if (flag == -1) {
					resultadminboardVo = adminDao.getadminboardfirstnoflag();
				} else {
					resultadminboardVo = adminDao.getadminboardfirst(flag);
				}
			}

			else {
				if (flag == -1) {
					resultadminboardVo = adminDao.getadminboardlastnoflag(lastnum);

				} else {
					resultadminboardVo = adminDao.getadminboardlast(lastnum, flag);
				}
			}

			for (int i = 0; i < resultadminboardVo.size(); i++) {
				int c_count = adminDao.admincommentcount(resultadminboardVo.get(i).getA_num());
				resultadminboardVo.get(i).setC_count(c_count);
			}

			resultHashMap.put("result", (T) "Success");
			resultHashMap.put("adminboardlist", (T) resultadminboardVo);
			return resultHashMap;
		} catch (Exception e) {
			e.printStackTrace();
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}

	}

	@RequestMapping(value = "/deleteadminboard", method = RequestMethod.GET)
	public @ResponseBody <T> HashMap<String, T> deleteadminboard(@RequestParam("a_num") int a_num) {
		HashMap<String, T> resultHashMap = new HashMap<String, T>();

		try {
			List<AdminBoardPhotoVo> admin_photo = adminDao.getadminphoto(a_num);
			for (int i = 0; i < admin_photo.size(); i++) {
				deleteFile(admin_photo.get(i).getA_photo_url());
			}
			adminDao.deleteadminphoto(a_num);
			adminDao.deleteadminboard_allrequest(a_num);
			adminDao.deleteadminboard_commentofallcomment(a_num);
			adminDao.deleteadminboard_allcomment(a_num);
			adminDao.deleteadminboard(a_num);
			resultHashMap.put("result", (T) "Success");
			return resultHashMap;
		} catch (Exception e) {
			e.printStackTrace();
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}
	}

	@RequestMapping(value = "/getadminboardcomment", method = RequestMethod.GET)
	public @ResponseBody <T> HashMap<String, T> getadminboardcomment(@RequestParam("a_num") int a_num,
			@RequestParam("lastnum") int lastnum) {
		HashMap<String, T> resultHashMap = new HashMap<String, T>();
		List<AdminBoardCommentVo> resultAdminBoardCommentVo = new ArrayList<AdminBoardCommentVo>();

		try {

			if (lastnum == -1) {
				resultAdminBoardCommentVo = adminDao.getadminboardcommentfirst(a_num);
			}

			else {
				resultAdminBoardCommentVo = adminDao.getadminboardcommentlast(a_num, lastnum);
			}

			for (int i = 0; i < resultAdminBoardCommentVo.size(); i++) {
				int cc_count = adminDao.getadminboardcommentofcommentcount(a_num,
						resultAdminBoardCommentVo.get(i).getA_c_num());
				resultAdminBoardCommentVo.get(i).setCc_count(cc_count);
			}

			resultHashMap.put("result", (T) "Success");
			resultHashMap.put("adminboardcommentlist", (T) resultAdminBoardCommentVo);
			return resultHashMap;

		} catch (Exception e) {
			e.printStackTrace();
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}
	}

	@RequestMapping(value = "/registadminboardcomment", method = RequestMethod.GET)
	public @ResponseBody <T> HashMap<String, T> registadminboardcomment(@RequestParam("a_num") int a_num,
			@RequestParam("u_id") String u_id, @RequestParam("a_c_content") String a_c_content) {
		HashMap<String, T> resultHashMap = new HashMap<String, T>();

		try {
			adminDao.registadminboardcomment(a_num, u_id, a_c_content);
			List<AdminBoardCommentVo> resultAdminBoardCommentVo = adminDao.getadminboardcommentfirst(a_num);

			for (int i = 0; i < resultAdminBoardCommentVo.size(); i++) {
				int cc_count = adminDao.getadminboardcommentofcommentcount(a_num,
						resultAdminBoardCommentVo.get(i).getA_c_num());
				resultAdminBoardCommentVo.get(i).setCc_count(cc_count);
			}
			String a_c_count = Integer.toString(adminDao.admincommentcount(a_num));
			resultHashMap.put("result", (T) "Success");
			resultHashMap.put("adminboardcommentlist", (T) resultAdminBoardCommentVo);
			resultHashMap.put("a_c_count", (T) a_c_count);
			return resultHashMap;

		} catch (Exception e) {
			e.printStackTrace();
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}
	}

	@RequestMapping(value = "/updateadminboardcomment", method = RequestMethod.GET)
	public @ResponseBody <T> HashMap<String, T> updateadminboardcomment(@RequestParam("a_num") int a_num,
			@RequestParam("a_c_num") int a_c_num, @RequestParam("a_c_content") String a_c_content) {
		HashMap<String, T> resultHashMap = new HashMap<String, T>();

		try {
			adminDao.updateadminboardcomment(a_num, a_c_num, a_c_content);
			resultHashMap.put("result", (T) "Success");
			return resultHashMap;
		} catch (Exception e) {
			e.printStackTrace();
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}
	}

	@RequestMapping(value = "/deleteadminboardcomment", method = RequestMethod.GET)
	public @ResponseBody <T> HashMap<String, T> deleteadminboardcomment(@RequestParam("a_num") int a_num,
			@RequestParam("a_c_num") int a_c_num) {
		HashMap<String, T> resultHashMap = new HashMap<String, T>();

		try {
			adminDao.deleteadminboardcommentofallcomment(a_num, a_c_num);
			adminDao.deleteadminboardcomment(a_num, a_c_num);
			resultHashMap.put("result", (T) "Success");
			return resultHashMap;
		} catch (Exception e) {
			e.printStackTrace();
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}
	}

	@RequestMapping(value = "/getadminboardcommentofcomment", method = RequestMethod.GET)
	public @ResponseBody <T> HashMap<String, T> getadminboardcommentofcomment(@RequestParam("a_num") int a_num,
			@RequestParam("a_c_num") int a_c_num, @RequestParam("lastnum") int lastnum) {
		HashMap<String, T> resultHashMap = new HashMap<String, T>();
		List<AdminBoardCommentOfCommentVo> resultAdminBoardCommentOfCommentVo = new ArrayList<AdminBoardCommentOfCommentVo>();
		try {

			if (lastnum == -1) {
				resultAdminBoardCommentOfCommentVo = adminDao.getadminboardcommentofcommentfirst(a_num, a_c_num);
			}

			else {
				resultAdminBoardCommentOfCommentVo = adminDao.getadminboardcommentofcommentlast(a_num, a_c_num,
						lastnum);
			}

			resultHashMap.put("result", (T) "Success");
			resultHashMap.put("adminboardcommentofcommentlist", (T) resultAdminBoardCommentOfCommentVo);
			return resultHashMap;

		} catch (Exception e) {
			e.printStackTrace();
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}
	}

	@RequestMapping(value = "/registadminboardcommentofcomment", method = RequestMethod.GET)
	public @ResponseBody <T> HashMap<String, T> registadminboardcommentofcomment(@RequestParam("a_num") int a_num,
			@RequestParam("a_c_num") int a_c_num, @RequestParam("u_id") String u_id,
			@RequestParam("a_cc_content") String a_cc_content) {
		HashMap<String, T> resultHashMap = new HashMap<String, T>();
		try {
			adminDao.registadminboardcommentofcomment(a_num, a_c_num, u_id, a_cc_content);
			List<AdminBoardCommentOfCommentVo> resultAdminBoardCommentOfCommentVo = adminDao
					.getadminboardcommentofcommentfirst(a_num, a_c_num);
			String a_cc_count = Integer.toString(adminDao.getadminboardcommentofcommentcount(a_num, a_c_num));

			resultHashMap.put("result", (T) "Success");
			resultHashMap.put("adminboardcommentofcommentlist", (T) resultAdminBoardCommentOfCommentVo);
			resultHashMap.put("a_cc_count", (T) a_cc_count);
			return resultHashMap;

		} catch (Exception e) {
			e.printStackTrace();
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}
	}

	@RequestMapping(value = "/updateadminboardcommentofcomment", method = RequestMethod.GET)
	public @ResponseBody <T> HashMap<String, T> updateadminboardcommentofcomment(@RequestParam("a_num") int a_num,
			@RequestParam("a_c_num") int a_c_num, @RequestParam("a_cc_num") int a_cc_num,
			@RequestParam("a_cc_content") String a_cc_content) {
		HashMap<String, T> resultHashMap = new HashMap<String, T>();

		try {
			adminDao.updateadminboardcommentofcomment(a_num, a_c_num, a_cc_num, a_cc_content);
			resultHashMap.put("result", (T) "Success");
			return resultHashMap;
		} catch (Exception e) {
			e.printStackTrace();
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}
	}

	@RequestMapping(value = "/deleteadminboardcommentofcomment", method = RequestMethod.GET)
	public @ResponseBody <T> HashMap<String, T> deleteadminboardcommentofcomment(@RequestParam("a_num") int a_num,
			@RequestParam("a_c_num") int a_c_num, @RequestParam("a_cc_num") int a_cc_num) {
		HashMap<String, T> resultHashMap = new HashMap<String, T>();

		try {
			adminDao.deleteadminboardcommentofcomment(a_num, a_c_num, a_cc_num);
			resultHashMap.put("result", (T) "Success");
			return resultHashMap;
		} catch (Exception e) {
			e.printStackTrace();
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}
	}


	@RequestMapping(value = "/registadminboardrequest", method = RequestMethod.GET)
	public @ResponseBody <T> HashMap<String, T> registadminboardrequest(@RequestParam("a_num") int a_num, @RequestParam("t_num") int t_num, 
			@RequestParam("contents") String contents) {

		HashMap<String, T> resultHashMap = new HashMap<String, T>();

		try {
			adminDao.registadminboardrequest(a_num, t_num, contents);
			resultHashMap.put("result", (T) "Success");
			return resultHashMap;
		} catch (Exception e) {
			e.printStackTrace();
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}
	}

	@RequestMapping(value = "/getadminboardrequest", method = RequestMethod.GET)
	public @ResponseBody <T> HashMap<String, T> getadminboardrequest(@RequestParam("a_num") int a_num) {

		HashMap<String, T> resultHashMap = new HashMap<String, T>();
		List<AdminRequestVo> resultAdminRequestVo = new ArrayList<AdminRequestVo>();
		try {
			resultAdminRequestVo = adminDao.getadminboardrequest(a_num);
			resultHashMap.put("result", (T) "Success");
			resultHashMap.put("adminboardrequestlist", (T) resultAdminRequestVo);
			return resultHashMap;
		} catch (Exception e) {
			e.printStackTrace();
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}

	}

	@RequestMapping(value = "/deleteadminboardrequest", method = RequestMethod.GET)
	public @ResponseBody <T> HashMap<String, T> deleteadminboardrequest(@RequestParam("a_num") int a_num, @RequestParam("t_num") int t_num) {
		HashMap<String, T> resultHashMap = new HashMap<String, T>();

		try {
			adminDao.deleteadminboardrequest(a_num, t_num);
			resultHashMap.put("result", (T) "Success");
			return resultHashMap;
		} catch (Exception e) {
			e.printStackTrace();
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}

	}

	@RequestMapping(value = "/getChangeTeamName", method = RequestMethod.GET)
	public @ResponseBody <T> HashMap<String, T> getChangeTeamName(){
		HashMap<String, T> resultHashMap = new HashMap<String, T>();
		List<RequestChangeTeamNameVo> resultRequestChangeTeamNameVo = adminDao.getChangeTeamName();

		try{
			if(resultRequestChangeTeamNameVo != null){
				resultHashMap.put("info",(T) resultRequestChangeTeamNameVo);
				resultHashMap.put("result", (T)"Success");

			}else{
				resultHashMap.put("info", (T)null);
				resultHashMap.put("result", (T)"Success");

			}
		}catch(Exception e){
			e.printStackTrace();
			resultHashMap.put("result", (T)"Failed");
			resultHashMap.put("info", (T)null);
			return resultHashMap;
		}
		return resultHashMap;


	}


	public String writeFile(String file, String savePath, int a_num, int a_index) throws Exception {
		String a_photo_url = a_num + "_" + a_index + ".jpg";
		BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(savePath + a_photo_url));
		bos.write(Base64.decodeBase64(file));
		bos.flush();
		bos.close();
		return filePath + a_photo_url;
	}

	public boolean deleteFile(String filePath) throws Exception {

		File delete_file = new File("C:/Users/user/Desktop/springwork/Hangang/src/main/webapp/" + filePath);
		if (!delete_file.delete())
			return false;

		return true;
	}

	@RequestMapping(value = "/permitChangeTeamName", method = RequestMethod.POST)
	public @ResponseBody <T> HashMap<String, T> permitChangeTeamName(@RequestBody JSONArray json) throws Exception {


		RequestChangeTeamNameVo RequestChangeTeamNameVo = null;
		JSONObject obj = null;
		HashMap<String, T> resultHashMap = new HashMap<String, T>();
		try{
			for(int i=0; i<json.size(); i++){
				ObjectMapper mapper = new ObjectMapper();
				RequestChangeTeamNameVo = mapper.readValue(json.toString(), RequestChangeTeamNameVo.class);
				adminDao.permitChangeTeamName(RequestChangeTeamNameVo.getT_num());
			}
		}catch(Exception e){
			e.printStackTrace();
			resultHashMap.put("result", (T)"Failed");
			return resultHashMap;
		}

		resultHashMap.put("result", (T)"Success");
		return resultHashMap;




	}


}
