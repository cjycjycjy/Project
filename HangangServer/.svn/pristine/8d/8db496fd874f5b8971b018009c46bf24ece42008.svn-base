package com.fuck.hangang.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.codec.binary.Base64;
import org.codehaus.jackson.map.ObjectMapper;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fuck.hangang.dao.ContestDao;
import com.fuck.hangang.vo.ContestPhotoVo;
import com.fuck.hangang.vo.ContestVo;

@Controller
public class ContestController {
	@Resource
	ContestDao contestDao;
	String filePath = "photo/contest/";
	String savePath = "C:/Users/user/Desktop/springwork/Hangang/src/main/webapp/photo/contest/";

	@RequestMapping(value = "/registphotocontest", method = RequestMethod.POST)
	public @ResponseBody <T> HashMap<String, T> registphotocontest(@RequestBody JSONObject json) {

		HashMap<String, T> resultHashMap = new HashMap<String, T>();

		ContestVo contestVo = new ContestVo();

		ObjectMapper mapper = new ObjectMapper();
		try {
			contestVo = mapper.readValue(json.toString(), ContestVo.class);
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			List<ContestPhotoVo> photo = contestVo.getPhoto();
			if (photo == null)
				contestDao.registcontest(contestVo);

			else {
				contestDao.registcontest(contestVo);
				for (int i = 0; i < photo.size(); i++) {
					String contestphotourl = writeFile(photo.get(i).getUrl(), savePath, contestVo.getP_num(), i);
					contestDao.registcontestphoto(contestVo.getP_num(), i,  contestphotourl);
				}

			}
			resultHashMap.put("result", (T) "Success");
			return resultHashMap;
		} catch (Exception e) {
			e.printStackTrace();
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}

	}

	@RequestMapping(value = "/getphotocontest", method = RequestMethod.GET)
	public @ResponseBody <T> HashMap<String, T> getphotocontest(@RequestParam("lastnum") int lastnum) {
		HashMap<String, T> resultHashMap = new HashMap<String, T>();
		
		try {
			if(lastnum == -1) {
				List<ContestVo> resultContestVo = contestDao.getcontestfirst();
				resultHashMap.put("result", (T) "Success");
				resultHashMap.put("contestlist", (T) resultContestVo);
				return resultHashMap;
			}
			else {
			List<ContestVo> resultContestVo = contestDao.getcontestlast(lastnum);
			resultHashMap.put("result", (T) "Success");
			resultHashMap.put("contestlist", (T) resultContestVo);
			return resultHashMap;
			}
		} catch (Exception e) {
			e.printStackTrace();
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}
	}
	
	@RequestMapping(value = "/deletephotocontest" , method = RequestMethod.GET)
	public @ResponseBody <T> HashMap<String, T> deletephotocontest(@RequestParam("p_num") int p_num) {
		HashMap<String, T> resultHashMap = new HashMap<String, T>();
		
		try {
			List<ContestPhotoVo> photo = contestDao.getcontestphoto(p_num);
			try {
				deleteFile(photo, savePath);
			}catch(Exception e) {
				e.printStackTrace();
			}
			contestDao.deletecontestphoto(p_num);
			contestDao.deletecontest(p_num);
			
			resultHashMap.put("result", (T) "Success");
			return resultHashMap;
		}catch(Exception e) {
			resultHashMap.put("result", (T) "Failed");
			return resultHashMap;
		}
	}

	public String writeFile(String file, String savePath, int p_num, int i) throws Exception {
		String p_photo_url = p_num + "_" + i + ".jpg";
		BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(savePath + p_photo_url));
		bos.write(Base64.decodeBase64(file));
		bos.flush();
		bos.close();
		return filePath + p_photo_url;
	}

	public boolean deleteFile(List<ContestPhotoVo> delete_photo_path, String savePath) throws Exception {

		for (int i = 0; i < delete_photo_path.size(); i++) {
			File delete_file = new File(
					"C:/Users/user/Desktop/springwork/Hangang/src/main/webapp/" + delete_photo_path.get(i).getUrl());
			if (!delete_file.delete())
				return false;
		}
		return true;
	}

}
