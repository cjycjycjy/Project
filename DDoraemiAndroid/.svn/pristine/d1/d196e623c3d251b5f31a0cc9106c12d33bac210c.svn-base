package ddoraemi.myinfopage.presenter;

import java.util.ArrayList;

import android.content.Intent;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import ddoraemi.detailediteminfo.model.AfterwordReply;
import ddoraemi.dialog.Dialog_BaseDialog;
import ddoraemi.home.model.Group;
import ddoraemi.myinfopage.model.Write_AfterwordInteractor;
import ddoraemi.myinfopage.model.Write_AfterwordInteractorInterface;
import ddoraemi.myinfopage.view.Write_AfterwordView;
import ddoraemi.myinfopage.view.Write_AfterwordViewInterface;

public class Write_AfterwordPresenter implements
		Write_AfterwordPresenterInterface, OnWrite_AfterwordFinishedListner {
	Write_AfterwordView view;

	private Write_AfterwordInteractorInterface Interactor;

	public Write_AfterwordPresenter(Write_AfterwordView view) {
		// TODO Auto-generated constructor stub
		this.view = view;
		Interactor = new Write_AfterwordInteractor();
	}

	@Override
	public void validateCredentials(String event) {
		// TODO Auto-generated method stub
		if (event.equals("back")) {
			view.gotoBack();
		}
		else if (event.equals("star1")) {
			view.selectScore(1);
		}
		else if (event.equals("star2")) {
			view.selectScore(2);
		}
		else if (event.equals("star3")) {
			view.selectScore(3);
		}
		else if (event.equals("star4")) {
			view.selectScore(4);
		}
		else if (event.equals("star5")) {
			view.selectScore(5);
		}
		else if(event.equals("pic"))
		{
			view.selctPic();
		}

	}

	@Override
	public void saveAfterword(JsonObject result) {
		String str_result=result.get("result").getAsString();
		if(str_result.equals("200"))
		{
			ArrayList<Group> pastgroup=new ArrayList<>();
			JsonArray pastArray = result.get("passer_program").getAsJsonArray();
			for (int i = 0; i < pastArray.size(); i++) {
				JsonObject dataobj = (JsonObject) pastArray.get(i);
				int p_id = (dataobj.get("p_id")).getAsInt();
				String p_name = (dataobj.get("p_name")).getAsString();
				String p_addr = (dataobj.get("p_addr")).getAsString();
				int g_id = (dataobj.get("g_id")).getAsInt();
				String g_name = (dataobj.get("g_name")).getAsString();
				String g_info = (dataobj.get("g_info")).getAsString();
				int g_status = (dataobj.get("g_status")).getAsInt();
				int g_persons = (dataobj.get("g_persons")).getAsInt();
				String e_name = (dataobj.get("e_name")).getAsString();
				String u_id = (dataobj.get("u_id")).getAsString();
				int g_want_persons = (dataobj.get("g_want_persons")).getAsInt();
				int g_open_year = (dataobj.get("g_open_year")).getAsInt();
				int g_open_month = (dataobj.get("g_open_month")).getAsInt();
				int g_open_day = (dataobj.get("g_open_day")).getAsInt();
				int g_close_year = (dataobj.get("g_close_year")).getAsInt();
				int g_close_month = (dataobj.get("g_close_month")).getAsInt();
				int g_close_day = (dataobj.get("g_close_day")).getAsInt();
				int g_start_year = (dataobj.get("g_start_year")).getAsInt();
				int g_start_month = (dataobj.get("g_start_month")).getAsInt();
				int g_start_day = (dataobj.get("g_start_day")).getAsInt();
				int g_start_hour = (dataobj.get("g_start_hour")).getAsInt();
				int g_start_minute = (dataobj.get("g_start_minute")).getAsInt();
				int g_end_hour = (dataobj.get("g_end_hour")).getAsInt();
				int g_end_minute = (dataobj.get("g_end_minute")).getAsInt();
				String p_photo_url = (dataobj.get("p_photo_url")).getAsString();
				Group temp = new Group(g_id, p_id, u_id, g_name, g_persons,
						g_want_persons, g_info, g_status, g_open_year,
						g_open_month, g_open_day, g_close_year, g_close_month,
						g_close_day, g_start_year, g_start_month, g_start_day,
						g_start_hour, g_start_minute, g_end_hour, g_end_minute,
						e_name, p_name, p_addr, p_photo_url);
				temp.setMyafterwordnum(-1);
				temp.setMyafterwordscore(0);
				if (dataobj.has("afterword")) {
					JsonObject afterwordob = dataobj.getAsJsonObject("afterword");
					int a_id = (afterwordob.get("a_id")).getAsInt();
					String a_content = (afterwordob.get("a_content")).getAsString();
					int a_grade = (afterwordob.get("a_grade")).getAsInt();
					temp.setMyafterwordnum(a_id);
					temp.setMyafterwordscore(a_grade);
					int a_year = (afterwordob.get("a_year")).getAsInt();
					int a_month = (afterwordob.get("a_month")).getAsInt();
					int a_day = (afterwordob.get("a_day")).getAsInt();
					int a_r_num = (afterwordob.get("a_r_num")).getAsInt();
					ArrayList<AfterwordReply> afterword_reply;
					afterword_reply = new ArrayList<AfterwordReply>();
					JsonArray reply = afterwordob.get("afterword_reply")
							.getAsJsonArray();
					JsonArray photo = afterwordob.get("a_photo_url")
							.getAsJsonArray();
					ArrayList<String> a_photo_url = new ArrayList<String>();
					String a_u_photo_url = "empty";
					if (dataobj.has("u_photo_url")) {
						a_u_photo_url = dataobj.get("u_photo_url").getAsString();
					}

					for (int j = 0; j < reply.size(); j++) {
						JsonObject obj = (JsonObject) reply.get(j);
						int a_r_id = (obj.get("a_r_id")).getAsInt();
						int a_id2 = (obj.get("a_id")).getAsInt();
						String a_r_content = (obj.get("a_r_content")).getAsString();
						int a_r_year = (obj.get("a_r_year")).getAsInt();
						int a_r_month = (obj.get("a_r_month")).getAsInt();
						int a_r_day = (obj.get("a_r_day")).getAsInt();
						String u_id2 = (obj.get("u_id")).getAsString();
						String ar_u_photo_url = "empty";
						if (obj.has("u_photo_url")) {
							if(obj.get("u_photo_url").isJsonNull())
							{
								ar_u_photo_url="";
								
							}
							else
							{
							ar_u_photo_url = (obj.get("u_photo_url")).getAsString();
							}
						}
						afterword_reply.add(new AfterwordReply(a_r_id, a_id2,
								a_r_content, a_r_year, a_r_month, a_r_day, u_id2,
								ar_u_photo_url));
					}
					if (photo.size() == 0) {
						a_photo_url.add("empty");
					} else {
						for (int k = 0; k < photo.size(); k++) {
							JsonObject obj = (JsonObject) photo.get(k);
							String url = obj.get("a_photo_url").getAsString();
							a_photo_url.add(url);
						}
					}
				}
				pastgroup.add(temp);
			}
			Intent intent=new Intent();
			intent.putExtra("items", pastgroup);
			view.setResult(100, intent);
			view.finish();
		}
		else
		{
			Dialog_BaseDialog dialog=new Dialog_BaseDialog(view, "후기등록에 실패하였습니다.");
			dialog.show();
		}
		
	}

	@Override
	public void validateCredentials(String event, String u_id, int g_id,
			String content, float grade, String[] photo) {
		if(event.equals("save"))
		{
			Interactor.saveAfterword(view, this, u_id,g_id,content,grade,photo);
		}
		
	}	
}
